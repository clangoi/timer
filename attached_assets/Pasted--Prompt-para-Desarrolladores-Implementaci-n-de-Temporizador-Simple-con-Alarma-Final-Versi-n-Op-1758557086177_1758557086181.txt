**Prompt para Desarrolladores — Implementación de “Temporizador Simple con Alarma Final” (Versión Optimizada para GitHub Pages)**

> **Objetivo General:**  
> Implementar un **modo de temporizador simple y autónomo** dentro del sistema de timer, compatible con **GitHub Pages** (entorno estático, sin backend).  
>   
> El usuario configura un único tiempo de cuenta regresiva. Al finalizar:  
> - Se reproduce un **sonido de notificación** (usando los tonos ya definidos en la app, sin introducir nuevos).  
> - El temporizador se **detiene automáticamente**.  
> - Se muestra un **texto descriptivo fijo: “TEMPORIZADOR”** durante toda la ejecución.  
> - Se aplican **indicadores visuales por estado** (sin especificar colores exactos, pero con lógica clara de uso).  
>   
> Se eliminan controles innecesarios para este modo: **no incluir “Minimizar/Maximizar” ni “Cerrar”**.

---

> **Requisitos Funcionales Detallados:**

### ▶️ **Nuevo Modo: “Temporizador Simple (Countdown con Alarma)”**

#### ➤ Configuración:
- El usuario ingresa **minutos y segundos** (formato MM:SS) mediante inputs o selectores.
- Valor mínimo: 00:01 — sin límite técnico (recomendado máximo UX: 99:59).
- Botón: **“Iniciar Temporizador”**.

#### ➤ Ejecución:
- Al iniciar, cuenta **regresivamente desde el tiempo configurado hasta 00:00**.
- Muestra en pantalla:  
  - Tiempo restante en formato **MM:SS**  
  - **Texto descriptivo fijo: “TEMPORIZADOR”** (visible en todo momento mientras cuenta)  
  - **Indicador visual por estado** (usar sistema de colores ya establecido en la app — sin definir valores HEX aquí, pero asegurar que se apliquen según contexto: activo, pausado, completado)

#### ➤ Finalización Automática:
- Al llegar a **00:00**:  
  ✅ Se **detiene automáticamente** el conteo (estado `isCompleted`).  
  🔊 Se reproduce un **sonido de alerta**, utilizando **los tonos ya implementados en otros modos de la app** (misma familia de frecuencias, duración y volumen — mantener coherencia auditiva).  
  🎯 Se actualiza el **indicador visual** para reflejar estado completado (usar estilo ya definido en la app para “finalizado”).  
  ⏹️ Los controles “Iniciar/Pausar” se desactivan o cambian a “Reiniciar”.

#### ➤ Controles Disponibles:
- **Iniciar / Pausar** (mismo botón, cambia según estado — solo activo mientras cuenta)  
- **Reiniciar**: Vuelve al estado inicial conservando el último tiempo configurado  
- **Configurar**: Permite modificar el tiempo sin perder el contexto del modo

---

> **Restricciones y Consideraciones Técnicas (GitHub Pages):**

- ✅ **Sin dependencias externas de audio**:  
  → Reutilizar el sistema de sonidos ya implementado en la app (Web Audio API o sistema equivalente).  
  → **No agregar nuevos tonos**: usar los existentes para mantener consistencia y evitar duplicación.

- ✅ **Persistencia con localStorage**:  
  → Guardar configuración (último tiempo ingresado) y estado (si estaba corriendo, pausado, etc.) en `localStorage`.  
  → Recuperar automáticamente al volver a abrir la sección.

- ✅ **Estado global compartido (Context API / Zustand / Redux)**:  
  → Integrar este modo en el sistema de estados existente:  
    ```ts
    setMode('simple-countdown')
    startTimer()
    pauseTimer()
    resetTimer()
    ```

- ✅ **Feedback visual coherente**:  
  → Aplicar estilos visuales (colores, bordes, animaciones) según el sistema ya establecido en la app para:  
    - Estado activo (`isRunning`)  
    - Estado pausado (`isPaused`)  
    - Estado completado (`isCompleted`)  
  → **No definir colores específicos en este prompt** — deben heredarse del sistema de diseño existente.

- ❌ **Funcionalidades eliminadas en este modo**:  
  → No incluir botones de “Minimizar/Maximizar” ni “Cerrar”.  
  → Este modo no requiere interfaz flotante ni persistencia de ventana — se maneja dentro del flujo principal de la app.

---

> **Resultado Esperado:**  
> El usuario configura un tiempo (ej: 3:00 para descanso entre series), inicia el temporizador y ve claramente:  
> - El texto “TEMPORIZADOR” visible en todo momento.  
> - El tiempo restante contando hacia atrás.  
> - Indicadores visuales coherentes con el resto de la app.  
>   
> Al llegar a 00:00:  
> - Suena una alerta auditiva (misma familia de sonidos usada en otros timers).  
> - El temporizador se detiene solo.  
> - La interfaz refleja visualmente que ha finalizado.  
>   
> Funciona perfectamente en GitHub Pages, sin dependencias externas, sin controles redundantes y con integración visual y auditiva coherente.

> **Nota clave:**  
> Este modo es minimalista por diseño: elimina complejidades innecesarias y se enfoca en una sola tarea — contar hasta cero y avisar.  
> Su valor está en su **simplicidad, confiabilidad y coherencia** con el sistema ya existente.

---

✅ Listo para usar en desarrollo. Especifica comportamiento, integración, restricciones y coherencia sin imponer estilos visuales o sonidos nuevos — ideal para mantener la identidad de la app y garantizar compatibilidad con GitHub Pages.